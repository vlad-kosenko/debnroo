<?php
/**
 * Additional scripts
 */
?>

<?php
	//Get grid configuration array
	$theme = $this->helper('ultimo');
	$gc = $theme->getCfgGroup('category_grid');
?>
<script type="text/javascript">
	//<![CDATA[

	<?php //Products grid: set equal height for grid items ?>
	<?php if ($gc['equal_height']): ?>
	function setGridItemsEqualHeight($)
	{
		var $list = $('.category-products-grid');
		var $listItems = $list.children();

		var centered = $list.hasClass('centered');
		var gridItemMaxHeight = 0;
		$listItems.each(function() {
			
			$(this).css("height", "auto"); <?php //Reset height ?>
			var $object = $(this).find('.actions');

			<?php //Align button center ?>
			if (centered)
			{
				var objectWidth = $object.width();
				var availableWidth = $(this).width();
				var space = availableWidth - objectWidth;
				var leftOffset = space / 2;
				$object.css("padding-left", leftOffset + "px"); <?php //Set left offset of the button ?>
			}

			<?php //Calculate top padding of the item and use it as bottom offset for the button ?>
			var bottomOffset = parseInt($(this).css("padding-top"));
			if (centered) bottomOffset += 10;
			$object.css("bottom", bottomOffset + "px");

			<?php //If "action" container is visible ?>
			if ($object.is(":visible"))
			{
				<?php //Set new bottom padding: height of the object + bottom offset ?>
				var objectHeight = $object.height();
				$(this).css("padding-bottom", (objectHeight + bottomOffset) + "px");
			}

			<?php //////////////////////////////////////////////////////////////// ?>			
			gridItemMaxHeight = Math.max(gridItemMaxHeight, $(this).height());
		});

		//Apply max height
		$listItems.css("height", gridItemMaxHeight + "px");

	}
	<?php endif; ?>



	jQuery(function($) {

		<?php //Collapsible: init ?>
		$('.collapsible').each(function(index) {
			$(this).prepend('<span class="opener">&nbsp;</span>');
			if ($(this).hasClass('active'))
			{
				$(this).children('.block-content').css('display', 'block');
			}
			else
			{
				$(this).children('.block-content').css('display', 'none');
			}			
		});
		<?php //Collapsible: toggle ?>
		$('.collapsible .opener').click(function() {
			
			var parent = $(this).parent();
			if (parent.hasClass('active'))
			{
				$(this).siblings('.block-content').stop(true).slideUp(300, "easeOutCubic");
				parent.removeClass('active');
			}
			else
			{
				$(this).siblings('.block-content').stop(true).slideDown(300, "easeOutCubic");
				parent.addClass('active');
			}
			
		});
		
		
		<?php //Drop-down ?>
		var ddOpenTimeout;
		var dMenuPosTimeout;
		var DD_DELAY_IN = 200;
		var DD_DELAY_OUT = 0;
		var DD_ANIMATION_IN = 0;
		var DD_ANIMATION_OUT = 0;
		$(".clickable-dropdown > .dropdown-toggle").click(function() {
			$(this).parent().addClass('open');
			$(this).parent().trigger('mouseenter');
		});
		$(".dropdown").hover(function() {
			
			
			var ddToggle = $(this).children('.dropdown-toggle');
			var ddMenu = $(this).children('.dropdown-menu');
			var ddWrapper = ddMenu.parent(); <?php //$(this); ?>
			
			<?php //Clear old position of dd menu ?>
			ddMenu.css("left", "");
			ddMenu.css("right", "");
			
			<?php //Show dd menu ?>
			if ($(this).hasClass('clickable-dropdown'))
			{
				<?php //If dropdown is opened (parent already has class 'open') ?>
				if ($(this).hasClass('open'))
				{
					$(this).children('.dropdown-menu').stop(true, true).delay(DD_DELAY_IN).fadeIn(DD_ANIMATION_IN, "easeOutCubic");
				}
			}
			else
			{
				<?php //Add class 'open' to dd ?>
				clearTimeout(ddOpenTimeout);
				ddOpenTimeout = setTimeout(function() {
					
					ddWrapper.addClass('open');
					
				}, DD_DELAY_IN);
				
				//$(this).addClass('open');
				$(this).children('.dropdown-menu').stop(true, true).delay(DD_DELAY_IN).fadeIn(DD_ANIMATION_IN, "easeOutCubic");
			}
			
			<?php //Set new position of dd menu.
			      //This code is delayed the same amount of time as drop-down animation. ?>
			clearTimeout(dMenuPosTimeout);
			dMenuPosTimeout = setTimeout(function() {

				if (ddMenu.offset().left < 0)
				{
					var space = ddWrapper.offset().left; <?php //Space available on the left of dd ?>
					ddMenu.css("left", (-1)*space);
					ddMenu.css("right", "auto");
				}
			
			}, DD_DELAY_IN);
			
		}, function() {
			var ddMenu = $(this).children('.dropdown-menu');
			clearTimeout(ddOpenTimeout); <?php //Clear, to close dd on mouseleave ?>
			ddMenu.stop(true, true).delay(DD_DELAY_OUT).fadeOut(DD_ANIMATION_OUT, "easeInCubic");
			if (ddMenu.is(":hidden"))
			{
				ddMenu.hide();
			}
			$(this).removeClass('open');
		});
		
		
		
		<?php //Shadow class for main content area ?>
		<?php if ($theme->isColor( $theme->getCfgDesign('main/inner_bg_color') )): ?>
			$(".main").addClass("show-bg");
		<?php endif; ?>
		
		
		
		<?php //Back to top ?>
		var windowScroll_t;
		$(window).scroll(function(){
			
			clearTimeout(windowScroll_t);
			windowScroll_t = setTimeout(function() {
										
				if ($(this).scrollTop() > 100)
				{
					$('#scroll-to-top').fadeIn();
				}
				else
				{
					$('#scroll-to-top').fadeOut();
				}
			
			}, 500);
			
		});
		
		$('#scroll-to-top').click(function(){
			$("html, body").animate({scrollTop: 0}, 600, "easeOutCubic");
			return false;
		});
		
		
		
		<?php //Products grid: item hover effect ?>
		<?php if ($gc['hover_effect']): ?>

			var startHeight;
			var bpad;
			$('.category-products-grid').on('mouseenter', '.item', function() {
			////$('.category-products-grid > .item').hover(function() {

				<?php if ($gc['disable_hover_effect']): //If hover effect disabled for vieport width below specified value ?>
					<?php //Start: viewport width condition ?>
					if ($(window).width() >= <?php echo $gc['disable_hover_effect']; ?>)
					{
				<?php endif; ?>

					startHeight = $(this).height();
					$(this).css("height", "auto"); //Release height
					$(this).find(".display-onhover").fadeIn(400, "easeInCubic"); //Show elements visible on hover
					var h2 = $(this).height();
					
					<?php //Compare start height with on-hover height, calculate the difference ?>
					////////////////////////////////////////////////////////////////
					var addtocartHeight = 0;
					var addtolinksHeight = 0;
					
					<?php if ($gc['display_addtocart'] == 1): //if displayed on hover ?>
						//addtocartHeight = $(this).find('.btn-cart').height(); //obsolete
						var buttonOrStock = $(this).find('.btn-cart');
						if (buttonOrStock.length == 0) buttonOrStock = $(this).find('.availability');
						addtocartHeight = buttonOrStock.height();
						
					<?php endif; ?>
					
					<?php if ($gc['display_addtolinks'] == 1): //if displayed on hover (but when is NOT on image) ?>
						var addtolinksEl = $(this).find('.add-to-links');
						if (addtolinksEl.hasClass("addto-onimage") == false)
							addtolinksHeight = addtolinksEl.innerHeight(); //.height();
					<?php endif; ?>
					
					<?php if ($gc['equal_height']
						&& ($gc['display_addtocart'] == 1 || $gc['display_addtolinks'] == 1)):
					?>
						var h3 = h2 + addtocartHeight + addtolinksHeight;
						var diff = 0;
						if (h3 < startHeight)
						{
							$(this).height(startHeight);
						}
						else
						{
							$(this).height(h3); <?php //Apply height explicitly ?>
							diff = h3 - startHeight;
						}
					<?php else: ?>
						var diff = 0;
						if (h2 < startHeight)
						{
							$(this).height(startHeight);
						}
						else
						{
							$(this).height(h2);
							diff = h2 - startHeight;
						}
					<?php endif; ?>
					////////////////////////////////////////////////////////////////

					$(this).css("margin-bottom", "-" + diff + "px"); <?php //Apply difference as nagative margin ?>

				<?php if ($gc['disable_hover_effect']): //If hover effect disabled for vieport width below specified value ?>
					} <?php //end: viewport width condition ?>
				<?php endif; ?>
				
			////}, function() {
			}).on('mouseleave', '.item', function() {

				<?php if ($gc['disable_hover_effect']): //If hover effect disabled for vieport width below specified value ?>
				<?php //Start: viewport width condition ?>
					if ($(window).width() >= <?php echo $gc['disable_hover_effect']; ?>)
					{
				<?php endif; ?>

					//Clean up
					$(this).find(".display-onhover").hide();
					$(this).css("margin-bottom", "");

					<?php //Return the default height. If "Egual Height" disabled, unset item's height. ?>
					<?php if ($gc['equal_height']): ?>
						$(this).height(startHeight);
					<?php else: ?>
						$(this).css("height", "");
					<?php endif; ?>

				<?php if ($gc['disable_hover_effect']): //If hover effect disabled for vieport width below specified value ?>
					} <?php //end: viewport width condition ?>
				<?php endif; ?>
				
			});
		
		<?php else: //end: hover effect enabled ?>
		
			<?php //Display elements visible on hover ?>
			$('.category-products-grid').on('mouseenter', '.item', function() {
				
				$(this).find(".display-onhover").fadeIn(400, "easeInCubic");

			}).on('mouseleave', '.item', function() {
				
				$(this).find(".display-onhover").hide();

			});
		
		<?php endif; ?>



		<?php //Display alternative image ?>
		$('.products-grid').on('mouseenter', '.item', function() {

			$(this).find(".alt-img").fadeIn(300, "easeInOutCubic");

		}).on('mouseleave', '.item', function() {
	
			$(this).find(".alt-img").fadeOut(300, "easeInOutCubic");

		});



		<?php //On resize ?>
		//Window size variables
		var winWidth = $(window).width();
		var winHeight = $(window).height();
		var windowResize_t;
		$(window).resize(function() {

			<?php //Prevent from firing the event in IE when the window wasn't actually resized. ?>
			var winNewWidth = $(window).width();
			var winNewHeight = $(window).height();
			if (winWidth != winNewWidth || winHeight != winNewHeight)
			{

				clearTimeout(windowResize_t);
				windowResize_t = setTimeout(function() {
		
					<?php //Trigger themeResize event ?>
					$(document).trigger("themeResize");

					<?php //Products grid: equal height of items ?>
					<?php if ($gc['equal_height']): ?>
						setGridItemsEqualHeight($);
					<?php endif; ?>
				
					<?php //Itemsliders: rollback ?>
					$('.itemslider').each(function(index) {
						var flex = $(this).data('flexslider');
						if (flex != null)
						{
							flex.flexAnimate(0);
							flex.resize();
						}
					});
					
					<?php //Slideshow ?>
					var slideshow = $('.the-slideshow').data('flexslider');
					if (slideshow != null)
					{
						slideshow.resize();
					}
				
				}, 100); //TODO: choose default value

			} //end: if
			//Update window size variables
			winWidth = winNewWidth;
			winHeight = winNewHeight;

		}); //end: on resize
		
		

	}); /* end: jQuery(){...} */
	
	

	jQuery(window).load(function(){
		
		<?php //Products grid: equal height of items ?>
		<?php if ($gc['equal_height']): ?>
			setGridItemsEqualHeight(jQuery);
		<?php endif; ?>

	}); /* end: jQuery(window).load(){...} */

	//]]>
</script>
